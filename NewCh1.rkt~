#lang racket
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))

(define (fib n)
  (cond ((< n 3) n)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))
 

(define (fibi n)
  (define (fib-iter a b count)
    (if ( = count 0) b
        (fib-iter ( + a b)
                  a
                  (- count 1))))
  (fib-iter 0 1 n))


(define (myfunc n)
  (define (myfunc-iter a b c count)
    (if (= count 0)
        c
        (myfunc-iter (+ a (* 2 b) (* 3 c))
                     a
                     b
                     (- count 1))))
  (myfunc-iter 2 1 0 n) 
  )

(define (myfunc-rec n)
  (cond ((< n 3) n)
        (else (+ (myfunc-rec ( - n 1))
                 (* 2 (myfunc-rec (- n 2)))
                 (* 3 (myfunc-rec ( - n 3)))))))

(define (square x)
  (* x x))

(define (even? x)
  (= (remainder x 2) 0))

(define (expt-iter b n)
  (define (expt-iter1 a b n)
    (if (= n 0) a
        (expt-iter1 (* a b) b ( - n 1))))
  (define (expt-iter2 a b n)
    (cond ((= n 0) a)
          ((even? n) (expt-iter2 a (square b) (/ n 2)))
          (else (expt-iter2 (* a b) b  (- n 1) ))))
  (expt-iter2 1 b n))

(define (double x)
  (* 2 x))

(define (halve x)
  (/ x 2))


(define (mult a b)
  (define (mult-iter s a b)
    (cond (( = b 0) 0)
          ((= b 1 ) s)
          ((even? b) (mult-iter (+ (double a) s) a (halve b)))
          (else (mult-iter (+ s a) a (- b 1)))))
  (mult-iter 0 a b))

(define (gcd x y)
  (if (= y 0) x
      (gcd  y (remainder x y))))

(define (smallest-divisor n)
 (find-divisor n 2))

(define (find-divisor n test-divisor)
  (define (next test-divisor)
    (next-odd-no test-divisor))
  
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))

(define (divides? x n)
  (= (remainder n x) 0))

(define (prime? n )
  (= n (smallest-divisor n)))



(define (timed-prime-test n)
  (newline)
  (display (string-append (number->string n) "\n"))
  (start-prime-test n (current-inexact-milliseconds)))

(define (start-prime-test n start-time)
  (if (prime? n) 
      (report (- (current-inexact-milliseconds) start-time))
      #f))
  
(define (report elapsed-time)
  (display "Time Taken ::")
  (display elapsed-time)
  #t)

(define (next-odd-no n)
  (cond ((even? n) (+ n 1))
        (else (+ n 2))))

(define (find-next-prime-number ll count)
  (cond ((= count 0) #f)
        ((= ll 2) 2)
        ((timed-prime-test (next-odd-no ll)) (find-next-prime-number (next-odd-no ll) (- count 1)))
        (else (find-next-prime-number (next-odd-no ll) count))))
                                             
;;;; Ex 1.22  
(define (search-for-primes ll n)
  (find-next-prime-number ll n ))


;;; Section 1.3.1 - Higher Order Procedures
(define (sum term a next b)
  (if (> a b) 
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (pi-sum a b)
  (define (pi-term x)
    (/ 1.0 (* x (+ x 2 ))))
  (define (pi-next x)
    (+ x 4))
  (sum pi-term a pi-next b))

;;; Defining an integral 
(define (integral f a b)
  (define dx 0.00001)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2)) add-dx b)
     dx))

;;; Exercise 1.29 : Simpson's Rule 
(define (simpson-integral f a b n)
  (define h (/ (- b a) n))
  (define (y k) (f (+ a (* k h))))
  (define (simpson-term k)
    (+ (* 2 (y k))
       (* 4 (y (+ k 1)))))
  
  (define (simpson-next k)
    (+ k 2))
  
  (* (/ h 3.0)
     (+ (y 0)
        (* 4 (y 1))
        (y n)
        (sum simpson-term 2 simpson-next (- n 2)))))

(define (inc x) (+ x 1))
(define (identity x) x)
;;; Ex 1.30 Iterative Sum Procedure
(define (sum-iter term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (+ result (term a)))))
  (iter a 0))

;;; Ex 1.31 
(define (product term a next b)
  (if (> a b)
      1
      (* (term a) (product term (next a) next b))))

(define (product-iter term a next b)
  (define (iter a result)
    (if (> a b)
        result 
        (iter (next a) (* result (term a)))))
  (iter a 1))

;;; Ex 1.32 : Accumulate 
(define (accumulate-iter combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a)(combiner result (term a )))))
  (iter a null-value))

(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
                (accumulate combiner null-value term (next a) next b))))

;;; Ex 1.33 : Filter (An even more generalized version of accumulate)

(define (filtered-accumulate combiner null-value term a next b predicate?)
  (define (iter a result)
    (cond ((> a b)  result)
          (else (cond((predicate? a) (iter (next a) (combiner result (term a))))
                     (else (iter (next a) (combiner result null-value)))))))
  (iter a null-value))
;; (filtered-accumulate + 0 identity 0 inc 10 prime?) returns 18

(define (sum-squares-primes a b)
  (filtered-accumulate + 0 square a inc b prime?))

(define (product-relative-primes n)
  (define (relative-prime? x)
    (= (gcd x n) 1))
  (filtered-accumulate * 1 identity 1 inc n relative-prime?))

;;; Ex 1.34
(define (f-ex1.34 g)
  (g 2))

;;;; Section 1.3.3
(define (average x y)
  (/ (+ x y)
     2.0))

(define (cube x)
  (* x x x ))

(define (search f neg-point pos-point)
  (define (close-enough? x y)
    (< (abs (- x y)) 0.00001))
  (let ((midpoint (average neg-point pos-point)))
    (if (close-enough? neg-point pos-point) ;; Termination condition
        midpoint
        (let ((test-value (f midpoint))) 
          (cond ((positive? test-value) (search f  neg-point midpoint))
                ((negative? test-value) (search f midpoint pos-point))
                (else midpoint))))))
                 
(define (half-interval-method f a b)
  (let ((a-value (f a))
        (b-value (f b)))
    (cond ((and (< a-value 0) (> b-value 0))
           (search f a b))
          ((and (> a-value 0) (< b-value 0))
           (search f b a))
          (else (error "Values are not of opposite sign" a b)))))
  

;;; Fixed Point 

(define (find-fixed-point f initial-guess)
  (define (good-enough? v1 v2)
    (< (abs (- v1 v2)) 0.00001))
  
  (define (improve-guess guess)
    (f guess))
  (define (print-guess guess)
    (display guess)
    (newline))
  
  (define (try f guess)    
    (print-guess guess)
    (let ((value (f guess)))
        (if (good-enough? guess value) guess
              (try f (improve-guess guess)))))
  (try f initial-guess))

;;; Ex 1.35
(define (get-golden-ratio)
 (find-fixed-point (λ(x) (+ 1 (/ 1.0 x))) 1.0))
; Returns 1.6180371352785146

;;; Ex 1.36 - Solves x^x = c by finding the fixed point of x = log(c)/ log(x);
(define (ex-1.36 c initial-guess)
  (find-fixed-point (λ(x) (/ (log c) (log x))) initial-guess))


;;; Ex 1.37

(define (cont-frac-recur n d k)
  (define (f i)
    (if (= i k) (/ (n k) (d k))
        (/ (n i) (+ (d i) (f (+ i 1 ))))))
  (f 1))

  
  