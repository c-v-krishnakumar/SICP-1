#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.2 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 61 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 1 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 55 24 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 55 24 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 148 0 211 0 0 0 -1
-1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 0
1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 1 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 2802 0 27 3 12 #"#lang racket"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"square"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"abs"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 3 1 #" "
0 0 23 3 2 #"(("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 2 #"(("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"ifabs"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"sqrt-iter"
0 0 4 3 1 #" "
0 0 14 3 5 #"guess"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"good-enough?"
0 0 4 3 1 #" "
0 0 14 3 5 #"guess"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"abs"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"square"
0 0 4 3 1 #" "
0 0 14 3 5 #"guess"
0 0 23 3 3 #")))"
0 0 4 3 1 #" "
0 0 21 3 7 #"0.00001"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 21 3 2 #"#t"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 21 3 2 #"#f"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"improve"
0 0 4 3 1 #" "
0 0 14 3 5 #"guess"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 5 #"guess"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 5 #"guess"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 3 #"2.0"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"good-enough?"
0 0 4 3 1 #" "
0 0 14 3 5 #"guess"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 14 3 5 #"guess"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 9 #"sqrt-iter"
0 0 23 3 1 #"("
0 0 4 3 1 #" "
0 0 14 3 7 #"improve"
0 0 4 3 1 #" "
0 0 14 3 5 #"guess"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"fib"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 3 1 #" "
0 0 23 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"fib"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"fib"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"fib-iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 14 3 5 #"count"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 3 1 #" "
0 0 23 3 2 #"(("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 5 #"count"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"fib-iter"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 5 #"count"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"close-enuf?"
0 0 4 3 1 #" "
0 0 14 3 3 #"old"
0 0 4 3 1 #" "
0 0 14 3 3 #"new"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 9 #"tolerance"
0 0 4 3 1 #" "
0 0 21 3 7 #"0.00001"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"abs"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 3 #"new"
0 0 4 3 1 #" "
0 0 14 3 3 #"old"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 9 #"tolerance"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 21 3 2 #"#t"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 21 3 2 #"#f"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 22 #"; Square Root problem "
0 0 4 29 1 #"\n"
0 0 18 3 53 #"; We are looking for a fixed point of the function x."
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"fixed-point"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 5 #"start"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 54 #"; Internal loops are defined using internal procedures"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 3 #"old"
0 0 4 3 1 #" "
0 0 14 3 3 #"new"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"close-enuf?"
0 0 4 3 1 #" "
0 0 14 3 3 #"old"
0 0 4 3 1 #" "
0 0 14 3 3 #"new"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 14 3 3 #"new"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 3 #"new"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 3 #"new"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 5 #"start"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 5 #"start"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 3 #"2.0"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 2 #"  "
0 0 14 3 12 #"average-damp"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 73
(
 #";NOTE : average-damp is the name given to a procedure (hence no pare"
 #"ns) ,"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 46 #"; That takes as its input another procedure f "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 26 #"; and returns a procedure "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 64
#";     that would take an x and return the average of x and f(x)."
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"average"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 62
#";;;; The following is the awesomest program I have ever seen! "
0 0 4 29 1 #"\n"
0 0 18 3 36 #";;;; Square Root by Newton's method."
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"sqrt-newton"
0 0 4 3 2 #"  "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 57 #";; Wishful thinking : Assuming that newtons method exists"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 6 #"newton"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"square"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 3 #")))"
0 0 4 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"newton"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 5 #"guess"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 86
(
 #";; Wishful thinking again. Assume function to return a derivative of"
 #" a function exists"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 6 #"f-dash"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"deriv"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 11 #"fixed-point"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"f-dash"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 5 #"guess"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"dx"
0 0 4 3 1 #" "
0 0 21 3 10 #"0.00000001"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 5 #"deriv"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 18 3 6 #";Input"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 18 3 32 #";Returns the derivative function"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 2 #"dx"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 2 #"dx"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 70
(
 #";;;; Rights and Priveleges of First Class Citizens in Programming La"
 #"ng"
) 0 0 4 29 1 #"\n"
0 0 18 3 26 #"; To be named by variables"
0 0 4 29 1 #"\n"
0 0 18 3 41 #"; To be passed as arguments to procedures"
0 0 4 29 1 #"\n"
0 0 18 3 40 #"; To be returned as values of procedures"
0 0 4 29 1 #"\n"
0 0 18 3 41 #"; To be incorporated into data structures"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 36 #";;;;;;;;;;;;; Exercises ;;;;;;;;;;;;"
0 0 4 29 1 #"\n"
0 0 18 3 26 #";;;;;;;; 1.29 ;;;;;;;;;;; "
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cube"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"simpson-integral"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"h"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"k"
0 0 4 3 1 #" "
0 0 14 3 1 #"h"
0 0 23 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 14 3 1 #"h"
0 0 4 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 3 1 #" "
0 0 23 3 2 #"(("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 21 3 1 #"2"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 21 3 1 #"4"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 23 3 1 #"("
0 0 14 3 16 #"simpson-integral"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 10 #";;;;; 1.30"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"identity"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"inc"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"sum"
0 0 4 3 1 #" "
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 21 3 1 #"0"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 3 #"sum"
0 0 4 3 1 #" "
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"sum-iter"
0 0 4 3 1 #" "
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 76
(
 #";; Always iteration is implemented by an inner function. with an acc"
 #"umulator"
) 0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 2 #"  "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 14 3 6 #"result"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"sum-int"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 3 #"sum"
0 0 4 3 1 #" "
0 0 14 3 8 #"identity"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 3 #"inc"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"sum-int-iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 8 #"sum-iter"
0 0 4 3 1 #" "
0 0 14 3 8 #"identity"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 3 #"inc"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 15 #";;;;;;;;; 1.31 "
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"product"
0 0 4 3 1 #" "
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 21 3 1 #"1"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 23 3 1 #"("
0 0 14 3 7 #"product"
0 0 4 3 1 #" "
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"product-iter"
0 0 4 3 1 #" "
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 14 3 6 #"result"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"product-int"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 7 #"product"
0 0 4 3 1 #" "
0 0 14 3 8 #"identity"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 3 #"inc"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"product-int-iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 12 #"product-iter"
0 0 4 3 1 #" "
0 0 14 3 8 #"identity"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 3 #"inc"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"factorial"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 16 #"product-int-iter"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"approximate-pi"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"square"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 21 3 1 #"4"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"product-iter"
0 0 4 3 1 #" "
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 21 3 3 #"2.0"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 21 3 9 #"100000000"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 18 3 18 #";; Wow! Wonderful!"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 15 #";;;;;;;;;; 1.32"
0 0 4 29 1 #"\n"
0 0 18 3 24 #";; Iterative Accumulator"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"accumulate-iter"
0 0 4 3 1 #" "
0 0 14 3 8 #"combiner"
0 0 4 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 4 3 1 #" "
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 4 3 1 #" "
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 14 3 6 #"result"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"combiner"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 18 3 24 #";; Recursive Accumulator"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"accumulate"
0 0 4 3 1 #" "
0 0 14 3 8 #"combiner"
0 0 4 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 4 3 1 #" "
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 14 3 10 #"null-value"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 8 #"combiner"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 10 #"accumulate"
0 0 4 3 1 #" "
0 0 14 3 8 #"combiner"
0 0 4 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 4 3 1 #" "
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 33 #"product-int-iter-using-accumulate"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 10 #"accumulate"
0 0 4 3 1 #" "
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 8 #"identity"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 3 #"inc"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 126
(
 #";; In order to define sum and product as accumulate functions, we re"
 #"turn a function that takes term,a ,next b and returns the "
) 0 0 4 29 1 #"\n"
0 0 18 3 91
(
 #";; appropriate sum/product function. Note the absence of the paren ("
 #" in the 1st define line"
) 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 24 #"product-using-accumulate"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 10 #"accumulate"
0 0 4 3 1 #" "
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 20 #"sum-using-accumulate"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 10 #"accumulate"
0 0 4 3 1 #" "
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 18 #";;;;;;;;;;;;; 1.33"
0 0 4 29 1 #"\n"
0 7        1705 4           0 0           0 283 0 14 3 8 #"Exercise"
0 0 2 3 1 #" "
0 0 14 3 5 #"1.33."
0 0 2 3 2 #"  "
0 0 14 3 3 #"You"
0 0 2 3 1 #" "
0 0 14 3 3 #"can"
0 0 2 3 1 #" "
0 0 14 3 6 #"obtain"
0 0 2 3 1 #" "
0 0 14 3 2 #"an"
0 0 2 3 1 #" "
0 0 14 3 4 #"even"
0 0 2 3 1 #" "
0 0 14 3 4 #"more"
0 0 2 3 1 #" "
0 0 14 3 7 #"general"
0 0 2 3 1 #" "
0 0 14 3 7 #"version"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 14 3 10 #"accumulate"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"exercise"
0 0 2 3 1 #" "
0 0 21 3 4 #"1.32"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 2 #"by"
0 0 2 3 1 #" "
0 0 14 3 11 #"introducing"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 6 #"notion"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 6 #"filter"
0 0 2 3 1 #" "
0 0 14 3 2 #"on"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 5 #"terms"
0 0 2 3 1 #" "
0 0 14 3 2 #"to"
0 0 2 3 1 #" "
0 0 14 3 2 #"be"
0 0 2 3 1 #" "
0 0 14 3 9 #"combined."
0 0 2 3 1 #" "
0 0 14 3 4 #"That"
0 0 2 3 1 #" "
0 0 14 3 2 #"is"
0 0 27 3 1 #","
0 0 2 3 1 #" "
0 0 14 3 7 #"combine"
0 0 2 3 1 #" "
0 0 14 3 4 #"only"
0 0 2 3 1 #" "
0 0 14 3 5 #"those"
0 0 2 3 1 #" "
0 0 14 3 5 #"terms"
0 0 2 3 1 #" "
0 0 14 3 7 #"derived"
0 0 2 3 1 #" "
0 0 14 3 4 #"from"
0 0 2 3 1 #" "
0 0 14 3 6 #"values"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 5 #"range"
0 0 2 3 1 #" "
0 0 14 3 4 #"that"
0 0 2 3 1 #" "
0 0 14 3 7 #"satisfy"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 9 #"specified"
0 0 2 3 1 #" "
0 0 14 3 10 #"condition."
0 0 2 3 1 #" "
0 0 14 3 3 #"The"
0 0 2 3 1 #" "
0 0 14 3 9 #"resulting"
0 0 2 3 1 #" "
0 0 14 3 19 #"filtered-accumulate"
0 0 2 3 1 #" "
0 0 14 3 11 #"abstraction"
0 0 2 3 1 #" "
0 0 14 3 5 #"takes"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 4 #"same"
0 0 2 3 1 #" "
0 0 14 3 9 #"arguments"
0 0 2 3 1 #" "
0 0 14 3 2 #"as"
0 0 2 3 1 #" "
0 0 14 3 10 #"accumulate"
0 0 27 3 1 #","
0 0 2 3 1 #" "
0 0 14 3 8 #"together"
0 0 2 3 1 #" "
0 0 14 3 4 #"with"
0 0 2 3 1 #" "
0 0 14 3 2 #"an"
0 0 2 3 1 #" "
0 0 14 3 10 #"additional"
0 0 2 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 14 3 3 #"one"
0 0 2 3 1 #" "
0 0 14 3 8 #"argument"
0 0 2 3 1 #" "
0 0 14 3 4 #"that"
0 0 2 3 1 #" "
0 0 14 3 9 #"specifies"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 7 #"filter."
0 0 2 3 1 #" "
0 0 14 3 5 #"Write"
0 0 2 3 1 #" "
0 0 14 3 19 #"filtered-accumulate"
0 0 2 3 1 #" "
0 0 14 3 2 #"as"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 10 #"procedure."
0 0 2 3 1 #" "
0 0 14 3 4 #"Show"
0 0 2 3 1 #" "
0 0 14 3 3 #"how"
0 0 2 3 1 #" "
0 0 14 3 2 #"to"
0 0 2 3 1 #" "
0 0 14 3 7 #"express"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 9 #"following"
0 0 2 3 1 #" "
0 0 14 3 5 #"using"
0 0 2 3 1 #" "
0 0 14 3 20 #"filtered-accumulate:"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 14 3 2 #"a."
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 3 #"sum"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 7 #"squares"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 5 #"prime"
0 0 2 3 1 #" "
0 0 14 3 7 #"numbers"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 8 #"interval"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 2 #"to"
0 0 2 3 1 #" "
0 0 14 3 1 #"b"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"assuming"
0 0 2 3 1 #" "
0 0 14 3 4 #"that"
0 0 2 3 1 #" "
0 0 14 3 3 #"you"
0 0 2 3 1 #" "
0 0 14 3 4 #"have"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 6 #"prime?"
0 0 2 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 2 3 1 #" "
0 0 14 3 7 #"already"
0 0 2 3 1 #" "
0 0 14 3 7 #"written"
0 0 23 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 14 3 2 #"b."
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 7 #"product"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 14 3 3 #"all"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 8 #"positive"
0 0 2 3 1 #" "
0 0 14 3 8 #"integers"
0 0 2 3 1 #" "
0 0 14 3 4 #"less"
0 0 2 3 1 #" "
0 0 14 3 4 #"than"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 14 3 4 #"that"
0 0 2 3 1 #" "
0 0 14 3 3 #"are"
0 0 2 3 1 #" "
0 0 14 3 10 #"relatively"
0 0 2 3 1 #" "
0 0 14 3 5 #"prime"
0 0 2 3 1 #" "
0 0 14 3 2 #"to"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"i.e."
0 0 27 3 1 #","
0 0 2 3 1 #" "
0 0 14 3 3 #"all"
0 0 2 3 1 #" "
0 0 14 3 8 #"positive"
0 0 2 3 1 #" "
0 0 14 3 8 #"integers"
0 0 2 3 1 #" "
0 0 14 3 1 #"i"
0 0 2 3 1 #" "
0 0 14 3 1 #"<"
0 0 2 3 1 #" "
0 0 14 3 1 #"n"
0 0 2 3 1 #" "
0 0 14 3 4 #"such"
0 0 2 3 1 #" "
0 0 14 3 4 #"that"
0 0 2 3 1 #" "
0 0 14 3 3 #"GCD"
0 0 23 3 1 #"("
0 0 14 3 1 #"i"
0 0 27 3 1 #","
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 27 3 1 #"."
0 0 2 29 1 #"\n"
0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 24 #"filtered-accumulate-iter"
0 0 4 3 1 #" "
0 0 14 3 8 #"combiner"
0 0 4 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 4 3 1 #" "
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 3 1 #" "
0 0 23 3 2 #"(("
0 0 4 3 1 #" "
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 3 3 #"   "
0 0 14 3 6 #"result"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 23 3 2 #"(("
0 0 14 3 9 #"predicate"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"combiner"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"term"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"next"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"combiner"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 4 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 23 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 10 #"null-value"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"prime?"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 11 #"upper-limit"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"sqrt-newton"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 3 1 #" "
0 0 23 3 2 #"(("
0 0 4 3 1 #" "
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 2 #"#f"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 23 3 2 #"(("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 11 #"upper-limit"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 2 #"#t"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 23 3 2 #"(("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 2 #"#f"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"inc"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 21 3 1 #"2"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 38 #";; So, now comes the answer to part a:"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 18 #"sum-squares-primes"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 24 #"filtered-accumulate-iter"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 1 #"+"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 21 3 1 #"0"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 6 #"square"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 1 #"a"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 3 #"inc"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 1 #"b"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 6 #"prime?"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 18 3 38 #";; So, now comes the answer to part b:"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"gcd"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 21 3 1 #"0"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 14 3 1 #"a"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 14 3 3 #"gcd"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"relative-prime?"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"gcd"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 2 #"#t"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 21 3 2 #"#f"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 17 #"relative-prime-n?"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 15 #"relative-prime?"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 18 3 47 #";; Saw this function? Partially initialized! :)"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 23 #"product-relative-primes"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 24 #"filtered-accumulate-iter"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 1 #"*"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 21 3 1 #"1"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 8 #"identity"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 21 3 1 #"1"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 3 #"inc"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 23 3 1 #"("
0 0 14 3 17 #"relative-prime-n?"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 18 3 11 #";;; Wow!!! "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7         211 4           0 0           0 34 0 21 3 4 #"1.35"
0 0 2 3 1 #" "
0 0 14 3 2 #"To"
0 0 2 3 1 #" "
0 0 14 3 5 #"Show:"
0 0 2 3 1 #" "
0 0 14 3 6 #"Golden"
0 0 2 3 1 #" "
0 0 14 3 5 #"Ratio"
0 0 2 3 1 #" "
0 0 14 3 2 #"is"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 5 #"fixed"
0 0 2 3 1 #" "
0 0 14 3 5 #"point"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 14 #"transformation"
0 0 2 3 1 #" "
0 0 14 3 1 #"x"
0 0 2 3 1 #" "
0 0 14 3 2 #"->"
0 0 2 3 1 #" "
0 0 21 3 1 #"1"
0 0 2 3 1 #" "
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 14 3 3 #"1/x"
0 0 2 29 1 #"\n"
0           0 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 1 #"d"
0 0 16 3 5 #"efine"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 12 #"golden-ratio"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 11 #"fixed-point"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")))"
0 0 4 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7        1087 4           0 0           0 180 0 14 3 5 #"1.36."
0 0 2 3 2 #"  "
0 0 14 3 6 #"Modify"
0 0 2 3 1 #" "
0 0 14 3 11 #"fixed-point"
0 0 2 3 1 #" "
0 0 14 3 2 #"so"
0 0 2 3 1 #" "
0 0 14 3 4 #"that"
0 0 2 3 1 #" "
0 0 14 3 2 #"it"
0 0 2 3 1 #" "
0 0 14 3 6 #"prints"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 14 3 14 #"approximations"
0 0 2 3 1 #" "
0 0 14 3 2 #"it"
0 0 2 3 1 #" "
0 0 14 3 9 #"generates"
0 0 27 3 1 #","
0 0 2 3 1 #" "
0 0 14 3 5 #"using"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 7 #"newline"
0 0 2 3 1 #" "
0 0 14 3 3 #"and"
0 0 2 3 1 #" "
0 0 14 3 7 #"display"
0 0 2 3 1 #" "
0 0 14 3 10 #"primitives"
0 0 2 3 1 #" "
0 0 14 3 5 #"shown"
0 0 2 3 1 #" "
0 0 14 3 2 #"in"
0 0 2 3 1 #" "
0 0 14 3 8 #"exercise"
0 0 2 3 1 #" "
0 0 14 3 5 #"1.22."
0 0 2 29 1 #"\n"
0 0 14 3 4 #"Then"
0 0 2 3 1 #" "
0 0 14 3 4 #"find"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 8 #"solution"
0 0 2 3 1 #" "
0 0 14 3 2 #"to"
0 0 2 3 1 #" "
0 0 14 3 2 #"xx"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 21 3 4 #"1000"
0 0 2 3 1 #" "
0 0 14 3 2 #"by"
0 0 2 3 1 #" "
0 0 14 3 7 #"finding"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 5 #"fixed"
0 0 2 3 1 #" "
0 0 14 3 5 #"point"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 14 3 1 #"x"
0 0 2 3 3 #"   "
0 0 14 3 3 #"log"
0 0 23 3 1 #"("
0 0 21 3 4 #"1000"
0 0 23 3 1 #")"
0 0 14 3 4 #"/log"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 27 3 1 #"."
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"Use"
0 0 2 3 1 #" "
0 0 14 3 6 #"Scheme"
0 0 21 3 1 #"'"
0 0 14 3 1 #"s"
0 0 2 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 2 3 1 #" "
0 0 14 3 3 #"log"
0 0 2 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 27 3 1 #","
0 0 2 3 1 #" "
0 0 14 3 5 #"which"
0 0 2 3 1 #" "
0 0 14 3 8 #"computes"
0 0 2 3 1 #" "
0 0 14 3 7 #"natural"
0 0 2 3 1 #" "
0 0 14 3 11 #"logarithms."
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 2 29 1 #"\n"
0 0 14 3 7 #"Compare"
0 0 2 3 1 #" "
0 0 14 3 3 #"the"
0 0 2 3 1 #" "
0 0 14 3 6 #"number"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 14 3 5 #"steps"
0 0 2 3 1 #" "
0 0 14 3 4 #"this"
0 0 2 3 1 #" "
0 0 14 3 5 #"takes"
0 0 2 3 1 #" "
0 0 14 3 4 #"with"
0 0 2 3 1 #" "
0 0 14 3 3 #"and"
0 0 2 3 1 #" "
0 0 14 3 7 #"without"
0 0 2 3 1 #" "
0 0 14 3 7 #"average"
0 0 2 3 1 #" "
0 0 14 3 8 #"damping."
0 0 2 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"Note"
0 0 2 3 1 #" "
0 0 14 3 4 #"that"
0 0 2 3 1 #" "
0 0 14 3 3 #"you"
0 0 2 3 1 #" "
0 0 14 3 6 #"cannot"
0 0 2 3 1 #" "
0 0 14 3 5 #"start"
0 0 2 3 1 #" "
0 0 14 3 11 #"fixed-point"
0 0 2 3 1 #" "
0 0 14 3 4 #"with"
0 0 2 3 1 #" "
0 0 14 3 1 #"a"
0 0 2 3 1 #" "
0 0 14 3 5 #"guess"
0 0 2 3 1 #" "
0 0 14 3 2 #"of"
0 0 2 3 1 #" "
0 0 21 3 1 #"1"
0 0 27 3 1 #","
0 0 2 3 1 #" "
0 0 14 3 2 #"as"
0 0 2 3 1 #" "
0 0 14 3 4 #"this"
0 0 2 3 1 #" "
0 0 14 3 5 #"would"
0 0 2 3 1 #" "
0 0 14 3 5 #"cause"
0 0 2 3 1 #" "
0 0 14 3 8 #"division"
0 0 2 3 1 #" "
0 0 14 3 2 #"by"
0 0 2 3 1 #" "
0 0 14 3 3 #"log"
0 0 23 3 1 #"("
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 21 3 2 #"0."
0 0 23 3 1 #")"
0           0 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 16 #"fixed-point-disp"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 5 #"start"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 18 3 54 #"; Internal loops are defined using internal procedures"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 3 #"old"
0 0 4 3 1 #" "
0 0 14 3 3 #"new"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 7 #"display"
0 0 4 3 1 #" "
0 0 14 3 3 #"new"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"newline"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"close-enuf?"
0 0 4 3 1 #" "
0 0 14 3 3 #"old"
0 0 4 3 1 #" "
0 0 14 3 3 #"new"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 14 3 3 #"new"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 3 #"new"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 3 #"new"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 5 #"start"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 5 #"start"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"solve"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 4 3 1 #" "
0 0 14 3 16 #"fixed-point-disp"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 21 3 3 #"2.0"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 18 3 12 #";; Call is ("
0 0 18 3 5 #"solve"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 2 #"\316\273"
0 0 18 3 1 #"("
0 0 18 3 1 #"x"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 1 #"/"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 3 #"log"
0 0 18 3 1 #" "
0 0 18 3 4 #"1000"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 3 #"log"
0 0 18 3 1 #" "
0 0 18 3 5 #"x))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 22 #";;;;;;;;;;;;;;;; 1.37 "
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"cont-frac"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"cont-frac-iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"k"
0 0 4 3 1 #" "
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 14 #"cont-frac-iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 14 #"cont-frac-iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 1 #"k"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 4 #";; ("
0 0 18 3 9 #"cont-frac"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 2 #"\316\273"
0 0 18 3 1 #"("
0 0 18 3 1 #"i"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 3 #"1.0"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 2 #"\316\273"
0 0 18 3 1 #"("
0 0 18 3 1 #"i"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 3 #"1.0"
0 0 18 3 1 #")"
0 0 18 3 1 #" "
0 0 18 3 47 #"100) gives the exact value = 0.6180339887498948"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 21 #";;;; 1.38 : To find e"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"euler-e"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 21 3 1 #"2"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"cont-frac"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 23 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 3 1 #" "
0 0 23 3 2 #"(("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 9 #"remainder"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 1 #"2"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"quotient"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 21 3 1 #"3"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 21 3 1 #"2"
0 0 4 3 1 #" "
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 23 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 21 3 5 #"100.0"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 10 #";;;;; 1.39"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"tan"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 9 #"cont-frac"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 2 #"  "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"square"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 21 3 1 #"2"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 21 3 5 #"10000"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 9 #";;;; 1.40"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 5 #"cubic"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 4 #"cube"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"square"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 9 #";;;; 1.41"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"double"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 10 #";;;;; 1.42"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 7 #"compose"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"g"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 11 #";;;;; 1.43 "
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"repeated"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 14 3 1 #"f"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 23 3 2 #"(("
0 0 14 3 7 #"compose"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 8 #"repeated"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 21 3 1 #"1"
0 0 23 3 3 #")))"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 18 3 30 #";;;; Wow. This is really cool!"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 11 #";;;;;; 1.44"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 11 #"smooth-once"
0 0 4 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 23 3 1 #"("
0 0 16 3 2 #"\316\273"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 2 #"dx"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 23 3 1 #"("
0 0 14 3 1 #"f"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 2 #"dx"
0 0 23 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 21 3 3 #"3.0"
0 0 23 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 23 3 1 #"("
0 0 14 3 6 #"smooth"
0 0 4 3 1 #" "
0 0 14 3 1 #"g"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 23 3 2 #"(("
0 0 14 3 8 #"repeated"
0 0 4 3 1 #" "
0 0 14 3 11 #"smooth-once"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"g"
0 0 23 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 18 #";;;;;;;;;;;;; 1.45"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 4 29 1 #"\n"
0           0
